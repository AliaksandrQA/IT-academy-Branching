package by.epam.course.branching;

// –î–∞–Ω—ã —Ç—Ä–∏ —Ç–æ—á–∫–∏ –?(—Ö1,—É1), –í(—Ö2,—É2) –∏ –°(—Ö3,—É3). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –±—É–¥—É—Ç –ª–∏ –æ–Ω–∏ —Ä–∞—?–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—?–º–æ–π.

public class BranchingTask29 {

	public static void solution() {
		
		
		double x1;
		double x2;
		double x3;
		double y1;
		double y2;
		double y3;
		
		
		x1 = 9;
		x2 = 11;
		x3 = 10;
		y1 = 8;
		y2 = 2;
		y3 = 8;
		if((x1 == x2 && x1 == x3) || (y1 == y2 && y1 == y3)) {
			System.out.println("—Ç—Ä–∏ —Ç–æ—á–∫–∏ —Ä–∞—?–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—?–º–æ–π");
		} else {
			
			System.out.println("—Ç—Ä–∏ —Ç–æ—á–∫–∏ –Ω–µ —Ä–∞—?–ø–æ–ª–æ–∂–µ–Ω—ã –Ω–∞ –æ–¥–Ω–æ–π –ø—Ä—?–º–æ–π");
		}

	}
	
}

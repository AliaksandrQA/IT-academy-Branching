package by.epam.course.branching;

/* –î–∞–Ω—ã –¥–≤–∞ —É–≥–ª–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–≤ –≥—Ä–∞–¥—É—?–∞—Ö). –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —?—É—â–µ—?—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, –∏ –µ—?–ª–∏ –¥–∞, —Ç–æ –±—É–¥–µ—Ç –ª–∏ –æ–Ω
–ø—Ä—?–º–æ—É–≥–æ–ª—å–Ω—ã–º. */

public class BranchingTask14 {

	public static void solution () {
		
		int corner1;
		int corner2;
		int corner3;
		
		corner1 = 70;
		corner2 = 30;
		
		corner3 = 180 - corner1 - corner2;
		
		if (corner1 > 0 && corner2 > 0 && corner3 > 0 ) {
			System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ —?—É—â–µ—?—Ç–≤—É–µ—Ç");
		} 
		if (corner1 == 90 || corner2 == 90 || corner3 ==90) {
			 System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä—?–º–æ—É–≥–æ–ª—å–Ω—ã–π");
			 
		} else {System.out.println("–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ –ø—Ä—?–º–æ—É–≥–æ–ª—å–Ω—ã–π");
		
		}
}
}

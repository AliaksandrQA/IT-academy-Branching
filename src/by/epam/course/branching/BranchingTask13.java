package by.epam.course.branching;

/*Ð”Ð°Ð½Ñ‹ Ð´Ð²Ðµ Ñ‚Ð¾Ñ‡ÐºÐ¸ Ð?(Ñ…1, Ñƒ1) Ð¸ Ð’(Ñ…2, Ñƒ2). Ð¡Ð¾Ñ?Ñ‚Ð°Ð²Ð¸Ñ‚ÑŒ Ð°Ð»Ð³Ð¾Ñ€Ð¸Ñ‚Ð¼, Ð¾Ð¿Ñ€ÐµÐ´ÐµÐ»Ñ?ÑŽÑ‰Ð¸Ð¹, ÐºÐ¾Ñ‚Ð¾Ñ€Ð°Ñ? Ð¸Ð· Ñ‚Ð¾Ñ‡ÐµÐº Ð½Ð°Ñ…Ð¾Ð´Ð¸Ñ‚Ñ?Ñ? Ð±Ð»Ð¸Ð¶Ðµ Ðº
Ð½Ð°Ñ‡Ð°Ð»Ñƒ ÐºÐ¾Ð¾Ñ€Ð´Ð¸Ð½Ð°Ñ‚. */

public class BranchingTask13 {
	
	public static void solution () {
		
		double x1;
		double y1;
		double x2;
		double y2;
		double length1;
		double length2;
		
		
		x1 = 3.0;
		y1 = - 2.0;
		x2 = 1.0;
		y2 = 2.5;
		
		length1 = Math.sqrt(Math.pow(x1, 2) + (Math.pow(y1, 2)));
		length2 = Math.sqrt(Math.pow(x2, 2) + (Math.pow(y2, 2)));
		
		if (length1 < length2) {
			System.out.println("Ð¢Ð¾Ñ‡ÐºÐ° (" + x1 + ", " + y1 + ") Ð±Ð»Ð¸Ð¶Ðµ Ðº Ð½Ð°Ñ‡Ð°Ð»Ñƒ ÐºÐ¾Ð¾Ñ€Ð´Ð¸Ð½Ð°Ñ‚, Ñ‡ÐµÐ¼ Ñ‚Ð¾Ñ‡ÐºÐ° (" + x2 + ", " + y2 + ")");
		} 
		else {
			System.out.println("Ð¢Ð¾Ñ‡ÐºÐ° (" + x1 + ", " + y1 + ") Ð´Ð°Ð»ÑŒÑˆÐµ Ð¾Ñ‚ Ð½Ð°Ñ‡Ð°Ð»Ð° ÐºÐ¾Ð¾Ñ€Ð´Ð¸Ð½Ð°Ñ‚, Ñ‡ÐµÐ¼ Ñ‚Ð¾Ñ‡ÐºÐ° (" + x2 + ", " + y2 + ")");
		}
	}

}
